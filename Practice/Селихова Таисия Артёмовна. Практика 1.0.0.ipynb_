{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"19-5VVsGjYuWlUYTvrLHxqKDD2eOqtzTH","timestamp":1731995988925},{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1731995359302}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО**: Селихова Таисия Артёмовна"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle:\n","  def __init__(self, width, height):\n","    self.width = int(width)\n","    self.height = int(height)\n","\n","  def area(self):\n","    square = self.width * self.height\n","    print(f\"Площадь прямоугольника: {square}\")\n","\n","  def perimeter(self):\n","    perimeter = 2 * (self.width + self.height)\n","    print(f\"Периметр прямоугольника: {perimeter}\")\n","\n","  def display_size(self):\n","    print(f\"Ширина: {self.width}, Высота: {self.height}\")\n","\n","Input=input('Введите два положительных числа через пробел ')\n","numbers=Input.split()\n","primer1=Rectangle(numbers[0], numbers[1])\n","primer1.area()\n","primer1. perimeter()\n","primer1.display_size()"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732581370496,"user_tz":-300,"elapsed":2982,"user":{"displayName":"Germetika","userId":"16759038338884725447"}},"outputId":"5c56abfd-7e78-4f56-945d-fa19a92f20b5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите два положительных числа через пробел 3 4\n","Площадь прямоугольника: 12\n","Периметр прямоугольника: 14\n","Ширина: 3, Высота: 4\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccount:\n","    def __init__(self, account_holder):\n","        self.account_holder = account_holder\n","        self.balance = 0\n","        print(f'Ваш баланс: {self.balance}')\n","\n","    def deposit(self, amount):\n","        self.balance += amount\n","        print(f'Вы добавили {amount} на ваш счёт.')\n","\n","    def withdraw(self, amount):\n","        if amount <= self.balance:\n","            self.balance -= amount\n","            print(f'Вы сняли {amount} с вашего счёта.')\n","        else:\n","            print(f'Вы не можете снять {amount}. Недостаточно средств на счете.')\n","\n","    def get_balance(self):\n","        print (f'Ваш баланс: {self.balance}')\n","\n","account = BankAccount(\"Петр Утинцев\")\n","account.deposit(1234)\n","account.withdraw(321)\n","account.withdraw(12222)\n","account.get_balance()"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732581891940,"user_tz":-300,"elapsed":328,"user":{"displayName":"Germetika","userId":"16759038338884725447"}},"outputId":"4b6e665d-dea7-48c5-e623-2df3b8fe8547"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Ваш баланс: 0\n","Вы добавили 1234 на ваш счёт.\n","Вы сняли 321 с вашего счёта.\n","Вы не можете снять 12222. Недостаточно средств на счете.\n","Ваш баланс: 913\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":["import random\n","\n","class Knight:\n","    def __init__(self, name, armor, damage_range, health):\n","        self.name = name\n","        self.armor = armor\n","        self.damage_range = damage_range\n","        self.health = health\n","\n","    def attack(self):\n","        damage = random.randint(*self.damage_range)\n","        print(f'{self.name} атакует! {damage} урона.')\n","        return damage\n","\n","    def take_damage(self, damage):\n","        self.health = self.health - damage + self.armor\n","        print(f'{self.name} получил {damage - self.armor} урона. Осталось здоровья: {self.health}.')\n","\n","    def is_alive(self):\n","        return self.health > 0\n","\n","class Dragon:\n","    def __init__(self, name, health, damage):\n","        self.name = name\n","        self.health = health\n","        self.damage = damage\n","\n","    def attack(self):\n","        damage = random.randint(*self.damage)\n","        print(f'{self.name} атакует! {damage} урона.')\n","        return damage\n","\n","    def take_damage(self, damage):\n","        self.health -= damage\n","        print(f'{self.name} получил {damage} урона. Осталось здоровья: {self.health}.')\n","\n","    def is_alive(self):\n","        return self.health > 0\n","\n","def game():\n","    name=input('Введите имя рыцаря: ')\n","    armor=int(input('Введите защиту рыцаря: '))\n","    health=int(input('Введите здоровье рыцаря: '))\n","    damage_range1=health//10\n","    damage_range2=damage_range1*2\n","\n","    knight = Knight(name=name, armor=armor, damage_range=\\\n","     (damage_range1, damage_range2), health=health)\n","    dragon = Dragon(\"Гоша\", health=100,\\\n","     damage=(3, 20))\n","\n","    print(\"Вы ходите первым!\")\n","\n","    while knight.is_alive() and dragon.is_alive():\n","\n","        damage_to_dragon = knight.attack()\n","        dragon.take_damage(damage_to_dragon)\n","\n","        if not dragon.is_alive():\n","            print(f'{dragon.name} повержен! {knight.name} одержал победу!')\n","            break\n","\n","        damage_to_knight = dragon.attack()\n","        knight.take_damage(damage_to_knight)\n","\n","        if not knight.is_alive():\n","            print(f'{knight.name} пал в бою! {dragon.name} победил!')\n","            break\n","\n","game()\n"],"metadata":{"id":"Oz9BZbhAFwua","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733193035827,"user_tz":-300,"elapsed":9787,"user":{"displayName":"Germetika","userId":"16759038338884725447"}},"outputId":"e6479dd3-aec3-4e82-dcc8-baca20bee779"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите имя рыцаря: Саша\n","Введите защиту рыцаря: 2\n","Введите здоровье рыцаря: 40\n","Вы ходите первым!\n","Саша атакует! 6 урона.\n","Гоша получил 6 урона. Осталось здоровья: 94.\n","Гоша атакует! 19 урона.\n","Саша получил 17 урона. Осталось здоровья: 23.\n","Саша атакует! 7 урона.\n","Гоша получил 7 урона. Осталось здоровья: 87.\n","Гоша атакует! 20 урона.\n","Саша получил 18 урона. Осталось здоровья: 5.\n","Саша атакует! 4 урона.\n","Гоша получил 4 урона. Осталось здоровья: 83.\n","Гоша атакует! 4 урона.\n","Саша получил 2 урона. Осталось здоровья: 3.\n","Саша атакует! 4 урона.\n","Гоша получил 4 урона. Осталось здоровья: 79.\n","Гоша атакует! 14 урона.\n","Саша получил 12 урона. Осталось здоровья: -9.\n","Саша пал в бою! Гоша победил!\n"]}]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["class Book:\n","    def __init__(self, title, author, isbn):\n","        self.title = title\n","        self.author = author\n","        self.isbn = isbn\n","        self.is_borrowed = False\n","\n","    def __str__(self):\n","        return f\"{self.title}, {self.author} (ISBN: {self.isbn})\\\n","         {'[Borrowed]' if self.is_borrowed else '[Available]'}\"\n","\n","class Library:\n","    def __init__(self):\n","        self.books = []\n","\n","    def add_book(self, book: Book):\n","        self.books.append(book)\n","        print(f'\\nКнига \"{book.title}\" добавлена в библиотеку.')\n","\n","    def borrow_book(self, isbn: str):\n","        book = self.find_book(isbn)\n","        if book:\n","            if not book.is_borrowed:\n","                book.is_borrowed = True\n","                print(f'\\nВы одолжили книгу \"{book.title}\".')\n","            else:\n","                print(f'\\nВы уже одолжили книгу \"{book.title}\".')\n","        else:\n","            print(f'\\nКнига с таким ISBN {isbn} не найдена.')\n","\n","    def return_book(self, isbn: str):\n","        book = self.find_book(isbn)\n","        if book:\n","            if book.is_borrowed:\n","                book.is_borrowed = False\n","                print(f'\\nВы вернули книгу \"{book.title}\".')\n","            else:\n","                print(f'\\nВы не брали книгу \"{book.title}\".')\n","        else:\n","            print(f'\\nКнига с таким ISBN {isbn} не найдена.')\n","\n","    def list_available_books(self):\n","        available_books = [book for book in self.books if not book.is_borrowed]\n","        if available_books:\n","            print(\"\\nДоступные книги в библиотеке:\")\n","            for book in available_books:\n","                print(book)\n","        else:\n","            print(\"\\nБиблиотека пуста.\")\n","\n","    def find_book(self, isbn: str):\n","        for book in self.books:\n","            if book.isbn == isbn:\n","                return book\n","        return None\n","\n","def main():\n","    library = Library()\n","\n","    while True:\n","        print(\"\")\n","        print(\"Меню:\")\n","        print(\"1. Добавить книгу\")\n","        print(\"2. Одолжить книгу\")\n","        print(\"3. Вернуть книгу\")\n","        print(\"4. Список доступных книг\")\n","        print(\"5. Выйти из программы\")\n","        choice = input(\"Выберите вариант: \")\n","\n","        if choice == '1':\n","            title = input(\"Введите название книги: \")\n","            author = input(\"Введите автора книги: \")\n","            isbn = input(\"Введите ISBN книги: \")\n","            book = Book(title, author, isbn)\n","            library.add_book(book)\n","        elif choice == '2':\n","            isbn = input(\"\\nВведите ISBN книги, которую хотите одолжить: \")\n","            library.borrow_book(isbn)\n","        elif choice == '3':\n","            isbn = input(\"\\nВведите ISBN книги, которую хотите вернуть: \")\n","            library.return_book(isbn)\n","        elif choice == '4':\n","            library.list_available_books()\n","        elif choice == '5':\n","            break\n","        else:\n","            print(\"Нет такого варианта, попробуйте снова.\")\n","\n","\n","main()\n"],"metadata":{"id":"GKKmdfN8GL6f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732586760043,"user_tz":-300,"elapsed":51724,"user":{"displayName":"Germetika","userId":"16759038338884725447"}},"outputId":"c2fd5a54-e353-4f09-f7a2-741a01887dd1"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите вариант: 1\n","Введите название книги: лама\n","Введите автора книги: мама\n","Введите ISBN книги: 12\n","\n","Книга \"лама\" добавлена в библиотеку.\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите вариант: 1\n","Введите название книги: робен\n","Введите автора книги: бобен\n","Введите ISBN книги: 13\n","\n","Книга \"робен\" добавлена в библиотеку.\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите вариант: 2\n","\n","Введите ISBN книги, которую хотите одолжить: 13\n","\n","Вы одолжили книгу \"робен\".\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите вариант: 3\n","\n","Введите ISBN книги, которую хотите вернуть: 12\n","\n","Вы не брали книгу \"лама\".\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите вариант: 3\n","\n","Введите ISBN книги, которую хотите вернуть: 13\n","\n","Вы вернули книгу \"робен\".\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите вариант: 4\n","\n","Доступные книги в библиотеке:\n","лама, мама (ISBN: 12)         [Available]\n","робен, бобен (ISBN: 13)         [Available]\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите вариант: 2\n","\n","Введите ISBN книги, которую хотите одолжить: 12\n","\n","Вы одолжили книгу \"лама\".\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите вариант: 4\n","\n","Доступные книги в библиотеке:\n","робен, бобен (ISBN: 13)         [Available]\n","\n","Меню:\n","1. Добавить книгу\n","2. Одолжить книгу\n","3. Вернуть книгу\n","4. Список доступных книг\n","5. Выйти из программы\n","Выберите вариант: 5\n"]}]},{"cell_type":"code","source":["s=[1, 3, 4]\n","s.clear()\n","print(s)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sbe5mZnC2urX","executionInfo":{"status":"ok","timestamp":1733188384131,"user_tz":-300,"elapsed":274,"user":{"displayName":"Germetika","userId":"16759038338884725447"}},"outputId":"94339328-43bc-4f2f-a360-dc85d4556423"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["[]\n"]}]}]}