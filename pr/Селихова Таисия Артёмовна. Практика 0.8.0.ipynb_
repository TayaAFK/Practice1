{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1-1pREx-cvWdJRwcPZCX2BdqRqwJdniU4","timestamp":1730778163269},{"file_id":"17IcY1UTGzZMUteC1w_OLi1DXlUbhQRJu","timestamp":1730777834927}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Введите ваше ФИО: Селихова Таисия Артёмовна**"],"metadata":{"id":"oP68Ko6DZnFT"}},{"cell_type":"code","source":[],"metadata":{"id":"_rtkk1A9Zmc5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"ra45s33wUt-C"}},{"cell_type":"markdown","source":["Задача: Создать чат бота для получения информации об исследованиях космоса\n","\n","Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:\n","\n","- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.\n","- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.\n","- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение объектов, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.\n","- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.\n","Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.\n","\n","Требования:\n","- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.\n","- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.\n","- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.\n","- Представление данных: Представляйте данные в четкой и организованной форме.\n","- Опция выхода: позволяет пользователям выходить из приложения в любое время."],"metadata":{"id":"G56D5mNCUwp5"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wGeJM9n4UqUD","colab":{"base_uri":"https://localhost:8080/"},"outputId":"ae1b9f60-6e89-442c-f2ff-ede8d5f1982b","executionInfo":{"status":"ok","timestamp":1731376716661,"user_tz":-300,"elapsed":60322,"user":{"displayName":"Germetika","userId":"16759038338884725447"}}},"outputs":[{"name":"stdout","output_type":"stream","text":["Введите 1, чтобы посмотреть астрономическую картинку дня\n","Введите 2, чтобы посмотреть фотографии с марсохода\n","Введите 3, чтобы посмотреть объекты, сближающиеся с Землёй\n","Введите 4, чтобы посмотреть данные о космической погоде\n","Введите 5 для выхода\n","3\n","Введите дату в формате ГГГГ-ММ-ДД: 2020-12-12\n","Название объекта: 481817 (2008 UL90)\n","Размер объекта(км): 1.1273012246\n","Потенциальная опасность: True\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","1\n","Название объекта: (2019 BN1)\n","Размер объекта(км): 0.3251172245\n","Потенциальная опасность: False\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","1\n","Название объекта: (2020 WH2)\n","Размер объекта(км): 0.5943468684\n","Потенциальная опасность: False\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","1\n","Название объекта: (2020 XN)\n","Размер объекта(км): 0.0714562102\n","Потенциальная опасность: False\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","1\n","Название объекта: (2020 XW)\n","Размер объекта(км): 0.0651688382\n","Потенциальная опасность: False\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","1\n","Название объекта: (2020 XD2)\n","Размер объекта(км): 0.0820427065\n","Потенциальная опасность: False\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","1\n","Название объекта: (2020 XB3)\n","Размер объекта(км): 0.0187948982\n","Потенциальная опасность: False\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","1\n","Название объекта: (2020 XA6)\n","Размер объекта(км): 0.0895447192\n","Потенциальная опасность: False\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","1\n","Название объекта: (2020 YF2)\n","Размер объекта(км): 0.1367854737\n","Потенциальная опасность: False\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","1\n","Название объекта: (2021 GQ5)\n","Размер объекта(км): 0.0118042929\n","Потенциальная опасность: False\n","\n","Введите 1, чтобы посмотреть следующий объект\n","Введите 2, чтобы посмотреть предыдущий объект\n","Введите 3, чтобы вернуться назад\n","3\n","Введите 1, чтобы посмотреть астрономическую картинку дня\n","Введите 2, чтобы посмотреть фотографии с марсохода\n","Введите 3, чтобы посмотреть объекты, сближающиеся с Землёй\n","Введите 4, чтобы посмотреть данные о космической погоде\n","Введите 5 для выхода\n","4\n","Укажите период, за который вы хотите найти данные\n","Первая дата в формате ГГГГ-ММ-ДД: 2020-12-12\n","Вторая дата: 2020-01-12\n","Солнечные вспышки:\n","Нет данных\n","Геомагнитные бури:\n","Нет данных\n","Введите 1, чтобы посмотреть астрономическую картинку дня\n","Введите 2, чтобы посмотреть фотографии с марсохода\n","Введите 3, чтобы посмотреть объекты, сближающиеся с Землёй\n","Введите 4, чтобы посмотреть данные о космической погоде\n","Введите 5 для выхода\n","5\n"]}],"source":["import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","def main():\n","  api_key='Bzrku2hhw3jAQmWaXdf7HQW9VYvVAKTOn6ADKp1B'\n","  while True:\n","    print('Введите 1, чтобы посмотреть астрономическую картинку дня')\n","    print('Введите 2, чтобы посмотреть фотографии с марсохода')\n","    print('Введите 3, чтобы посмотреть объекты, сближающиеся с Землёй')\n","    print('Введите 4, чтобы посмотреть данные о космической погоде')\n","    print('Введите 5 для выхода')\n","    INPUT=input()\n","\n","    if INPUT=='1':\n","      url='https://api.nasa.gov/planetary/apod'\n","      date=input('Введите дату в формате ГГГГ-ММ-ДД: ')\n","      response=requests.get(f'{url}?api_key={api_key}&date={date}')\n","      if response.json()['url'][-3:] == 'jpg' or response.json()['url'][-3:] == 'png':\n","        data = response.json()['url']\n","        res = requests.get(data)\n","        img = Image.open(io.BytesIO(res.content))\n","        display(img)\n","      else:\n","        print(response.json()['url'])\n","      print(response.json()['explanation'])\n","\n","    if INPUT=='2':\n","      url = 'https://api.nasa.gov/mars-photos/api/v1/rovers/'\n","      print('Введите дату в формате ГГГГ-ММ-ДД и тип камеры: ')\n","      print('Типы камер: fhaz, rhaz, mast, chencam, mahli, mardi, navcam, pancam, minites')\n","      date = input('Дата: ')\n","      type_cam=input('Тип камеры: ')\n","      if (type_cam=='fhaz' or type_cam=='rhaz' or type_cam=='mast' or\\\n","          type_cam=='chencam' or type_cam=='mahli' or type_cam=='mardi' or\\\n","          type_cam=='navcam') and date!='':\n","        response=requests.get(f'{url}curiosity/photos?sol=1000&camera={type_cam}&api_key={api_key}&earth_date={date}')\n","        photo=response.json()['photos']\n","        if photo!=[]:\n","          count=0\n","          URL=photo[count][\"img_src\"]\n","          res = requests.get(URL)\n","          img = Image.open(io.BytesIO(res.content))\n","          display(img)\n","          while True:\n","            print('Введите 1, чтобы посмотреть следующую фотографию')\n","            print('Введите 2, чтобы посмотреть предыдущую фотографию')\n","            print('Введите 3, чтобы вернуться назад')\n","            number=input()\n","            if number=='1' and count+1<=len(photo):\n","              count+=1\n","              URL=photo[count][\"img_src\"]\n","              result = requests.get(URL)\n","              img = Image.open(io.BytesIO(result.content))\n","              display(img)\n","            elif number=='1' and count+1>len(photo):\n","              print('Это последнее фото')\n","            elif number=='2' and count-1>=0:\n","              count-=1\n","              URL=photo[count][\"img_src\"]\n","              result = requests.get(URL)\n","              img = Image.open(io.BytesIO(result.content))\n","              display(img)\n","            elif number=='2' and count-1<0:\n","              print('Это первое фото')\n","            elif number=='3':\n","              break\n","        if (type_cam=='pancam' or type_cam=='minites') and date!='':\n","          print(f'{url}opportunity/photos?sol=1000&camera={type_cam}&api_key={api_key}&earth_date={date}')\n","          response=requests.get(f'{url}opportunity/photos?sol=1000&camera={type_cam}&api_key={api_key}&earth_date={date}')\n","          photo=response.json()['photos']\n","          count=0\n","          print(f'ID: {photo[count][\"id\"]}')\n","          print(f'IMG_SRC: {photo[count][\"img_src\"]}')\n","          while True:\n","            print('Введите 1, чтобы посмотреть следующую фотографию')\n","            print('Введите 2, чтобы посмотреть предыдущую фотографию')\n","            print('Введите 3, чтобы вернуться назад')\n","            number=input()\n","            if number=='1' and count+1<len(photo):\n","              count+=1\n","              print(f'ID: {photo[count][\"id\"]}')\n","              print(f'IMG_SRC: {photo[count][\"img_src\"]}')\n","            elif number=='1' and count+1>=len(photo):\n","              print('Это последний объект')\n","            elif number=='2' and count-1>=0:\n","              count-=1\n","              print(f'ID: {photo[count][\"id\"]}')\n","              print(f'IMG_SRC: {photo[count][\"img_src\"]}')\n","            elif number=='2' and count-1<0:\n","              print('Это первый объект')\n","            elif number=='3':\n","              break\n","        else:\n","          print('Нет данных')\n","      else:\n","        print('Нет данных')\n","\n","\n","    if INPUT=='3':\n","      url='https://api.nasa.gov/neo/rest/v1/feed'\n","      date=input('Введите дату в формате ГГГГ-ММ-ДД: ')\n","      response=requests.get(f'{url}?start_date={date}\\\n","      &end_date={date}&api_key={api_key}')\n","      data=response.json()[\"near_earth_objects\"][date]\n","      count=0\n","      print('Название объекта:',data[count]['name'])\n","      print('Размер объекта(км):',data[count][\"estimated_diameter\"]\\\n","      [\"kilometers\"][\"estimated_diameter_max\"])\n","      print('Потенциальная опасность:',data[count]\\\n","      [\"is_potentially_hazardous_asteroid\"])\n","      while True:\n","        print('')\n","        print('Введите 1, чтобы посмотреть следующий объект')\n","        print('Введите 2, чтобы посмотреть предыдущий объект')\n","        print('Введите 3, чтобы вернуться назад')\n","        number=input()\n","        if number=='1' and count+1<=len(data):\n","            count+=1\n","            print('Название объекта:',data[count]['name'])\n","            print('Размер объекта(км):',data[count][\"estimated_diameter\"]\\\n","             [\"kilometers\"][\"estimated_diameter_max\"])\n","            print('Потенциальная опасность:',data[count]\\\n","             [\"is_potentially_hazardous_asteroid\"])\n","        elif number=='1' and count+1>len(data):\n","            print('Это последнее фото')\n","        elif number=='2' and count-1>=0:\n","            count-=1\n","            print('Название объекта:',data[count]['name'])\n","            print('Размер объекта(км):',data[count][\"estimated_diameter\"]\\\n","             [\"kilometers\"][\"estimated_diameter_max\"])\n","            print('Потенциальная опасность:',data[count]\\\n","             [\"is_potentially_hazardous_asteroid\"])\n","        elif number=='2' and count-1<0:\n","            print('Это первое фото')\n","        elif number=='3':\n","            break\n","\n","    if INPUT=='4':\n","      print('Укажите период, за который вы хотите найти данные')\n","      date1=input('Первая дата в формате ГГГГ-ММ-ДД: ')\n","      date2=input('Вторая дата: ')\n","      url_flr='https://api.nasa.gov/DONKI/FLR'\n","      url_gst='https://api.nasa.gov/DONKI/GST'\n","      response_flr=requests.get(f'{url_flr}?startDate={date1}&endDate={date2}&api_key={api_key}')\n","      response_gst=requests.get(f'{url_gst}?startDate={date1}&endDate={date2}&api_key={api_key}')\n","      data_flr=response_flr.json()\n","      data_gst=response_gst.json()\n","      print('Солнечные вспышки:')\n","      if data_flr!=[]:\n","        for count_flr in range(len(data_flr)):\n","          print('Дата:', data_flr[count_flr][\"flrID\"][:10])\n","          print('Тип класса:', data_flr[count_flr][\"classType\"])\n","      else:\n","        print('Нет данных')\n","      print('Геомагнитные бури:')\n","      if data_gst!=[]:\n","        for count_gst in range(len(data_gst)):\n","          print('Дата:', data_gst[count_gst][\"gstID\"][:10])\n","          print('Количество Kp-индексов:', len(data_gst[count_gst][\"allKpIndex\"]))\n","      else:\n","        print('Нет данных')\n","\n","    if INPUT=='5':\n","      break\n","\n","main()"]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ia9UtA0cU1Iy"}},{"cell_type":"markdown","source":["Описание задачи\n","\n","Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:\n","\n","Требования:\n","Извлекать произведения искусства:\n","\n","- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.\n","Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.\n","Фильтровать произведения искусства:\n","\n","- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).\n","Отображать подробную информацию об оформлении:\n","\n","- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.\n","После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.\n","Разбивка на страницы и взаимодействие с пользователем:\n","\n","- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.\n","\n","Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.\n","\n","Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы."],"metadata":{"id":"Ofu_GmqrU1Iy"}},{"cell_type":"code","execution_count":2,"metadata":{"id":"jjUH1GznU1Iy","colab":{"base_uri":"https://localhost:8080/","height":462},"outputId":"173fbfc4-c13f-49b3-ed25-596c8981f954","executionInfo":{"status":"error","timestamp":1731977264968,"user_tz":-300,"elapsed":14332,"user":{"displayName":"Germetika","userId":"16759038338884725447"}}},"outputs":[{"name":"stdout","output_type":"stream","text":["Выберите 1, чтобы фильтровать по исполнителю\n","Выберите 2, чтобы посмотреть другие страницы\n","Выберите 3, чтобы выйти\n","1\n","Имя художника: vincent van gogh\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-0c1a2139d901>\u001b[0m in \u001b[0;36m<cell line: 54>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     52\u001b[0m       \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m \u001b[0mthird_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-2-0c1a2139d901>\u001b[0m in \u001b[0;36mthird_func\u001b[0;34m()\u001b[0m\n\u001b[1;32m     46\u001b[0m     \u001b[0mINPUT\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mINPUT\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'1'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m       \u001b[0msecond_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mINPUT\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'2'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m       \u001b[0mfirst_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-2-0c1a2139d901>\u001b[0m in \u001b[0;36msecond_func\u001b[0;34m()\u001b[0m\n\u001b[1;32m     34\u001b[0m   \u001b[0martist_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Имя художника: '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mpage\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m126320\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m     \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'{url}?page={page}&limit=1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'artist_title'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0martist_name\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m       \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Название:'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"title\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests/api.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(url, params, **kwargs)\u001b[0m\n\u001b[1;32m     71\u001b[0m     \"\"\"\n\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"get\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests/api.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(method, url, **kwargs)\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;31m# cases, and look like a memory leak in others.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0msessions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSession\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36mrequest\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    587\u001b[0m         }\n\u001b[1;32m    588\u001b[0m         \u001b[0msend_kwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msettings\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 589\u001b[0;31m         \u001b[0mresp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0msend_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests/sessions.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, **kwargs)\u001b[0m\n\u001b[1;32m    701\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    702\u001b[0m         \u001b[0;31m# Send the request\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 703\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madapter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    704\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    705\u001b[0m         \u001b[0;31m# Total elapsed time of the request (approximately)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests/adapters.py\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    665\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    666\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 667\u001b[0;31m             resp = conn.urlopen(\n\u001b[0m\u001b[1;32m    668\u001b[0m                 \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrequest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    669\u001b[0m                 \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36murlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)\u001b[0m\n\u001b[1;32m    787\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    788\u001b[0m             \u001b[0;31m# Make the request on the HTTPConnection object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 789\u001b[0;31m             response = self._make_request(\n\u001b[0m\u001b[1;32m    790\u001b[0m                 \u001b[0mconn\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    791\u001b[0m                 \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/urllib3/connectionpool.py\u001b[0m in \u001b[0;36m_make_request\u001b[0;34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)\u001b[0m\n\u001b[1;32m    534\u001b[0m         \u001b[0;31m# Receive the response from the server\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    535\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 536\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    537\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mBaseSSLError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    538\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_timeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_value\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mread_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/urllib3/connection.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    505\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m         \u001b[0;31m# Get the response from http.client.HTTPConnection\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 507\u001b[0;31m         \u001b[0mhttplib_response\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetresponse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    508\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    509\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/http/client.py\u001b[0m in \u001b[0;36mgetresponse\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1373\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1374\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1375\u001b[0;31m                 \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbegin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1376\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mConnectionError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1377\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/http/client.py\u001b[0m in \u001b[0;36mbegin\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    316\u001b[0m         \u001b[0;31m# read until we get a non-100 response\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    317\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 318\u001b[0;31m             \u001b[0mversion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreason\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    319\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mstatus\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mCONTINUE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    320\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/http/client.py\u001b[0m in \u001b[0;36m_read_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    277\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    278\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_read_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 279\u001b[0;31m         \u001b[0mline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_MAXLINE\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"iso-8859-1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    280\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0m_MAXLINE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mLineTooLong\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"status line\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    703\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 705\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    706\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    707\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/ssl.py\u001b[0m in \u001b[0;36mrecv_into\u001b[0;34m(self, buffer, nbytes, flags)\u001b[0m\n\u001b[1;32m   1301\u001b[0m                   \u001b[0;34m\"non-zero flags not allowed in calls to recv_into() on %s\"\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1302\u001b[0m                   self.__class__)\n\u001b[0;32m-> 1303\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1304\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1305\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbuffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnbytes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/ssl.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(self, len, buffer)\u001b[0m\n\u001b[1;32m   1157\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1158\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbuffer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1159\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbuffer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1160\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1161\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sslobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","url = 'https://api.artic.edu/api/v1/artworks'\n","\n","def first_func():\n","  page='1'\n","  response=requests.get(f'{url}?page={page}&limit=25')\n","  first_page_arts=response.json()\n","  print('Всего работ:', first_page_arts[\"pagination\"][\"total\"])\n","  print('Всего страниц:', first_page_arts[\"pagination\"][\"total_pages\"])\n","  while True:\n","    print('Введите номер страницы, чтобы перейти на неё')\n","    print('Введите \"-\", чтобы вернуться назад')\n","    page=input()\n","    page_response=requests.get(f'{url}?page={page}&limit=25')\n","    page_arts=page_response.json()\n","    if page=='5053':\n","      for count in range(19):\n","        print(count+1,')', 'Название:', page_arts['data'][count][\"title\"])\n","        print('Художник:', page_arts['data'][count][\"artist_title\"])\n","        print('')\n","    elif page=='-':\n","      break\n","    else:\n","      for count in range(25):\n","        print(count+1,')', 'Название:', page_arts['data'][count][\"title\"])\n","        print('Художник:', page_arts['data'][count][\"artist_title\"])\n","        print('')\n","\n","def second_func():\n","  artist_name=input('Имя художника: ')\n","  for page in range(1, 126320):\n","    response=requests.get(f'{url}?page={page}&limit=1')\n","    if response.json()['data'][0]['artist_title'] == artist_name:\n","      print('Название:', response.json()['data'][0][\"title\"])\n","      print('ID картины:', response.json()['data'][0][\"id\"])\n","\n","def third_func():\n","  while True:\n","    print('Выберите 1, чтобы фильтровать по исполнителю')\n","    print('Выберите 2, чтобы посмотреть другие страницы')\n","    print('Выберите 3, чтобы выйти')\n","    INPUT= input()\n","    if INPUT=='1':\n","      second_func()\n","    elif INPUT=='2':\n","      first_func()\n","    else:\n","      break\n","\n","third_func()\n","\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"eecUb-akU1ji"}},{"cell_type":"markdown","source":["Задача: Создать программу по управлению портфелем криптовалют\n","\n","Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.\n","\n","Требования:\n","Получение текущих цен на криптовалюты:\n","\n","Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.\n","\n","Управление портфелем:\n","\n","- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.\n","- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).\n","\n","Отслеживание изменения цен:\n","\n","- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.\n","- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.\n","\n","Поиск исторических данных о ценах:\n","\n","- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.\n","- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).\n","\n","Взаимодействие с пользователем:\n","\n","- Реализуйте интерфейс командной строки для ввода данных пользователем.\n","- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.\n"],"metadata":{"id":"jsK7IKptU1ji"}},{"cell_type":"code","source":["import requests\n","import json\n","from datetime import datetime, timedelta\n","import matplotlib.pyplot as plt\n","\n","class CryptoPortfolio:\n","    def __init__(self):\n","        self.portfolio = {}\n","        self.api_url = \"https://api.coingecko.com/api/v3\"\n","\n","    def get_current_price(self, crypto_id):\n","        response = requests.get(f\"{self.api_url}/simple/price?ids={crypto_id}&vs_currencies=usd&include_24hr_change=true\")\n","        data = response.json()\n","        return data[crypto_id]['usd'], data[crypto_id]['usd_24h_change']\n","\n","    def add_to_portfolio(self, crypto_id, amount):\n","        self.portfolio[crypto_id] = self.portfolio.get(crypto_id, 0) + amount\n","\n","    def calculate_total_value(self):\n","        total_value = 0\n","        for crypto_id, amount in self.portfolio.items():\n","            price, _ = self.get_current_price(crypto_id)\n","            total_value += price * amount\n","        return total_value\n","\n","    def track_price_changes(self):\n","        changes = {}\n","        for crypto_id in self.portfolio.keys():\n","            _, change = self.get_current_price(crypto_id)\n","            changes[crypto_id] = change\n","        return changes\n","\n","    def get_historical_data(self, crypto_id):\n","        end_date = datetime.now()\n","        start_date = end_date - timedelta(days=7)\n","        response = requests.get(f\"{self.api_url}/coins/{crypto_id}/market_chart/range?vs_currency=usd&from={start_date.timestamp()}&to={end_date.timestamp()}\")\n","        data = response.json()\n","        prices = data['prices']\n","        return [(datetime.fromtimestamp(price[0] / 1000), price[1]) for price in prices]\n","\n","    def visualize_historical_data(self, historical_data):\n","        dates, prices = zip(*historical_data)\n","        plt.plot(dates, prices)\n","        plt.xlabel('Дата')\n","        plt.ylabel('Цена (в долларах США)')\n","        plt.title('Исторические цены')\n","        plt.xticks(rotation=45)\n","        plt.tight_layout()\n","        plt.show()\n","\n","    def user_interface(self):\n","        while True:\n","            print(\"1. Добавить в портфолио\")\n","            print(\"2. Рассчитать общую стоимость\")\n","            print(\"3. Отслеживать изменения цен\")\n","            print(\"4. Получение исторических данных\")\n","            print(\"5. Выход\")\n","            choice = input(\"Выберите опцию: \")\n","\n","            if choice == '1':\n","                crypto_id = input(\"Введите идентификатор криптовалюты (например, биткоин).:\")\n","                amount = float(input(\"Введите сумму: \"))\n","                self.add_to_portfolio(crypto_id, amount)\n","                print(f\"Добавлено {amount} {crypto_id} в портфолио.\")\n","\n","            elif choice == '2':\n","                total_value = self.calculate_total_value()\n","                print(f\"Общая стоимость портфеля: ${total_value:.2f}\")\n","\n","            elif choice == '3':\n","                changes = self.track_price_changes()\n","                for crypto_id, change in changes.items():\n","                    print(f\"{crypto_id}: {change:.2f}% изменения за последние 24 часа\")\n","\n","            elif choice == '4':\n","                crypto_id = input(\"Введите идентификатор криптовалюты (например, биткоин).: \")\n","                historical_data = self.get_historical_data(crypto_id)\n","                self.visualize_historical_data(historical_data)\n","\n","            elif choice == '5':\n","                break\n","\n","            else:\n","                print(\"Неправильная команда. Попробуйте снова.\")\n","\n","if __name__ == \"__main__\":\n","    portfolio = CryptoPortfolio()\n","    portfolio.user_interface()\n"],"metadata":{"id":"_0DToTqlvywa","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1731375789068,"user_tz":-300,"elapsed":53337,"user":{"displayName":"Germetika","userId":"16759038338884725447"}},"outputId":"54975a01-60cc-4163-ab49-f687b5175a4e"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["1. Добавить в портфолио\n","2. Рассчитать общую стоимость\n","3. Отслеживать изменения цен\n","4. Получение исторических данных\n","5. Выход\n","Выберите опцию: 4\n","Введите идентификатор криптовалюты (например, биткоин).: bitcoin\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"name":"stdout","output_type":"stream","text":["1. Добавить в портфолио\n","2. Рассчитать общую стоимость\n","3. Отслеживать изменения цен\n","4. Получение исторических данных\n","5. Выход\n","Выберите опцию: 2\n","Общая стоимость портфеля: $0.00\n","1. Добавить в портфолио\n","2. Рассчитать общую стоимость\n","3. Отслеживать изменения цен\n","4. Получение исторических данных\n","5. Выход\n","Выберите опцию: 1\n","Введите идентификатор криптовалюты (например, биткоин).:1\n","Введите сумму: 1\n","Добавлено 1.0 1 в портфолио.\n","1. Добавить в портфолио\n","2. Рассчитать общую стоимость\n","3. Отслеживать изменения цен\n","4. Получение исторических данных\n","5. Выход\n","Выберите опцию: 1\n","Введите идентификатор криптовалюты (например, биткоин).:bitcoin\n","Введите сумму: 1\n","Добавлено 1.0 bitcoin в портфолио.\n","1. Добавить в портфолио\n","2. Рассчитать общую стоимость\n","3. Отслеживать изменения цен\n","4. Получение исторических данных\n","5. Выход\n","Выберите опцию: 2\n"]},{"output_type":"error","ename":"KeyError","evalue":"'1'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-27-a21e77914451>\u001b[0m in \u001b[0;36m<cell line: 86>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     86\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m     \u001b[0mportfolio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCryptoPortfolio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 88\u001b[0;31m     \u001b[0mportfolio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_interface\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-27-a21e77914451>\u001b[0m in \u001b[0;36muser_interface\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     65\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mchoice\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'2'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m                 \u001b[0mtotal_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalculate_total_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m                 \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Общая стоимость портфеля: ${total_value:.2f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-27-a21e77914451>\u001b[0m in \u001b[0;36mcalculate_total_value\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mtotal_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mcrypto_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mamount\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mportfolio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m             \u001b[0mprice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_current_price\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcrypto_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m             \u001b[0mtotal_value\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mprice\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mamount\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mtotal_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-27-a21e77914451>\u001b[0m in \u001b[0;36mget_current_price\u001b[0;34m(self, crypto_id)\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{self.api_url}/simple/price?ids={crypto_id}&vs_currencies=usd&include_24hr_change=true\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcrypto_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'usd'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcrypto_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'usd_24h_change'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0madd_to_portfolio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcrypto_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mamount\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: '1'"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"QGrsZrv5U1s8"}},{"cell_type":"markdown","source":["Задание 4: Проектное\n","\n","Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!\n","\n","\n","Критерии приемки результата:\n","\n","- Проект включает в себя не менее 5 возможостей для пользователя\n","- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку\n","- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)\n","- Проект должен обязательно включать в себя ряд используемых конструкции:\n","    - Функции\n","    - Условные конструкции\n","    - Ввод/вывод\n","    - Словари/Списки\n","- Допускается использование библиотек:\n","    - requests\n","    - datetime\n","    - random"],"metadata":{"id":"qs_XITmYU1s8"}},{"cell_type":"markdown","source":["**Здесь добавьте описание вашего проекта**"],"metadata":{"id":"VKXhaJi4FL0B"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wiA55k1KU1s8"},"outputs":[],"source":["#  А здесь код"]}]}